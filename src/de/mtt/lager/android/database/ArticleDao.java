package de.mtt.lager.android.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.mtt.lager.android.database.Article;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ARTICLE.
*/
public class ArticleDao extends AbstractDao<Article, Long> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CreateTime = new Property(1, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(2, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
        public final static Property CreateUser = new Property(3, Integer.class, "createUser", false, "CREATE_USER");
        public final static Property UpdateUser = new Property(4, Integer.class, "updateUser", false, "UPDATE_USER");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property PictureURL = new Property(7, String.class, "pictureURL", false, "PICTURE_URL");
        public final static Property Orderno = new Property(8, String.class, "orderno", false, "ORDERNO");
    };


    public ArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ARTICLE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CREATE_TIME' INTEGER," + // 1: createTime
                "'UPDATE_TIME' INTEGER," + // 2: updateTime
                "'CREATE_USER' INTEGER," + // 3: createUser
                "'UPDATE_USER' INTEGER," + // 4: updateUser
                "'TITLE' TEXT," + // 5: title
                "'DESCRIPTION' TEXT," + // 6: description
                "'PICTURE_URL' TEXT," + // 7: pictureURL
                "'ORDERNO' TEXT);"); // 8: orderno
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ARTICLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(2, createTime.getTime());
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(3, updateTime.getTime());
        }
 
        Integer createUser = entity.getCreateUser();
        if (createUser != null) {
            stmt.bindLong(4, createUser);
        }
 
        Integer updateUser = entity.getUpdateUser();
        if (updateUser != null) {
            stmt.bindLong(5, updateUser);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String pictureURL = entity.getPictureURL();
        if (pictureURL != null) {
            stmt.bindString(8, pictureURL);
        }
 
        String orderno = entity.getOrderno();
        if (orderno != null) {
            stmt.bindString(9, orderno);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // createTime
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // updateTime
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // createUser
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // updateUser
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pictureURL
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // orderno
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreateTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setUpdateTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setCreateUser(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setUpdateUser(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPictureURL(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOrderno(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Article entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Article entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
